Higher Diploma in Science in Computing - Data Analytics
Author: Carlos Rigueti
Programming and Scripting - Iris
The project revolves around accessing and analyzing the Iris dataset, a classic dataset frequently used in the field of data science and machine learning. By working with this dataset, we aim to demonstrate a range of skills, including data manipulation, statistical analysis, visualization, and programming techniques using Python within the Jupyter Notebook environment.
The Iris flower data set is a multivariate data set introduced by the British statistician and biologist Ronald Fisher in his 1936 paper 'The use of multiple measurements in taxonomic problems'. It is sometimes called Anderson's Iris data set because Edgar Anderson collected the data to quantify the morphologic variation of Iris flowers of three related species.

About this project:
It is Iris dataset.

Iris
Fischer's Iris Data UCI Machine Learning Repository: Iris Data Set.
[2]

Imports:
This project required some libraries to be imported to load, analyze and visualize the data, such as:
- Pandas: is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool;
- Numpy: is a library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices;
- Matplotlib: is a comprehensive library for creating static, animated, and interactive visualizations;
- Seaborn: is a data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.

# Data Load:
The dataset imported from Palmer Penguins and saved into a file .csv, named as penguins.csv in the repository. The .csv file is using the library pandas as df = pd.read_csv [3]

# Load the dataset into a DataFrame
df = pd.read_csv('iris.csv')
print (df)
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None

# Inspect Data:
The inspect data process involves examining and understanding the structure, content, and characteristics of a dataset. It provides users with valuable insights to comprehend the dataset and make informed decisions about data preprocessing, analysis, and modeling. Here's what inspect data typically provides for users to understand the dataset:

# The first 5 rows of the dataset.
df.head ()
   sepal_length  sepal_width  petal_length  petal_width      species
0           5.1          3.5           1.4          0.2  Iris-setosa
1           4.9          3.0           1.4          0.2  Iris-setosa
2           4.7          3.2           1.3          0.2  Iris-setosa
3           4.6          3.1           1.5          0.2  Iris-setosa
4           5.0          3.6           1.4          0.2  Iris-setosa

# The last 5 rows of the dataset.
df.tail ()
     sepal_length  sepal_width  petal_length  petal_width         species
145           6.7          3.0           5.2          2.3  Iris-virginica
146           6.3          2.5           5.0          1.9  Iris-virginica
147           6.5          3.0           5.2          2.0  Iris-virginica
148           6.2          3.4           5.4          2.3  Iris-virginica
149           5.9          3.0           5.1          1.8  Iris-virginica

# Informations of the dataset.
df.info ()
None

# Count the number of null.
df.isnull ().sum ()
sepal_length    0
sepal_width     0
petal_length    0
petal_width     0
species         0
dtype: int64

# Descibe the data set.
df.describe ()
       sepal_length  sepal_width  petal_length  petal_width
count    150.000000   150.000000    150.000000   150.000000
mean       5.843333     3.054000      3.758667     1.198667
std        0.828066     0.433594      1.764420     0.763161
min        4.300000     2.000000      1.000000     0.100000
25%        5.100000     2.800000      1.600000     0.300000
50%        5.800000     3.000000      4.350000     1.300000
75%        6.400000     3.300000      5.100000     1.800000
max        7.900000     4.400000      6.900000     2.500000

# Compute the Pearson correlation.
df.corr(method='pearson', numeric_only=True)
              sepal_length  sepal_width  petal_length  petal_width
sepal_length      1.000000    -0.109369      0.871754     0.817954
sepal_width      -0.109369     1.000000     -0.420516    -0.356544
petal_length      0.871754    -0.420516      1.000000     0.962757
petal_width       0.817954    -0.356544      0.962757     1.000000

# Extract the data from the "species" column.
df.value_counts(['species'])
species        
Iris-setosa        50
Iris-versicolor    50
Iris-virginica     50
Name: count, dtype: int64

# Check the size of your DataFrame.
df.shape
(150, 5)

# Summary statistics for numerical variables
summary_stats = df.describe()
       sepal_length  sepal_width  petal_length  petal_width
count    150.000000   150.000000    150.000000   150.000000
mean       5.843333     3.054000      3.758667     1.198667
std        0.828066     0.433594      1.764420     0.763161
min        4.300000     2.000000      1.000000     0.100000
25%        5.100000     2.800000      1.600000     0.300000
50%        5.800000     3.000000      4.350000     1.300000
75%        6.400000     3.300000      5.100000     1.800000
max        7.900000     4.400000      6.900000     2.500000

summary_stats = df.head ()
   sepal_length  sepal_width  petal_length  petal_width      species
0           5.1          3.5           1.4          0.2  Iris-setosa
1           4.9          3.0           1.4          0.2  Iris-setosa
2           4.7          3.2           1.3          0.2  Iris-setosa
3           4.6          3.1           1.5          0.2  Iris-setosa
4           5.0          3.6           1.4          0.2  Iris-setosa

summary_stats = df.isnull ().sum ()
sepal_length    0
sepal_width     0
petal_length    0
petal_width     0
species         0
dtype: int64

summary_stats = df.tail ()
     sepal_length  sepal_width  petal_length  petal_width         species
145           6.7          3.0           5.2          2.3  Iris-virginica
146           6.3          2.5           5.0          1.9  Iris-virginica
147           6.5          3.0           5.2          2.0  Iris-virginica
148           6.2          3.4           5.4          2.3  Iris-virginica
149           5.9          3.0           5.1          1.8  Iris-virginica

summary_stats = df.corr(method='pearson', numeric_only=True)
              sepal_length  sepal_width  petal_length  petal_width
sepal_length      1.000000    -0.109369      0.871754     0.817954
sepal_width      -0.109369     1.000000     -0.420516    -0.356544
petal_length      0.871754    -0.420516      1.000000     0.962757
petal_width       0.817954    -0.356544      0.962757     1.000000

summary_stats = df.value_counts(['species'])
species        
Iris-setosa        50
Iris-versicolor    50
Iris-virginica     50
Name: count, dtype: int64

summary_stats = df.shape
(150, 5)

VISUALIZATION DATA


Bar Chart.

Fig. 1 - Bar Chart

Histogram of Iris Flowers.

Fig. 2 - Histogram

Histogram of Iris Flowers by Species.

Fig. 3 - Histogram by Species

Boxplot of Iris Flowers by Species.

Fig. 4 - Boxplot

Correlation Heatmap of the data set.

Fig. 5 - Heatmap

Correlation Heatmap of the data set by Species.

Fig. 6 - Heatmap by Species

Scatter plot of Iris Flowers by Species.

Fig. 7 - Scatter plot by Species

Pair plot of Iris Flowers by Species.

Fig. 8 - Pair plot by Species 


End
last commit on 20/05/2024.

